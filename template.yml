---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template to run the LaunchDarkly Relay with Fargate"

Resources:
  LambdaResourcesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - nodejs16.x
        - nodejs14.x
      Content: 
        S3Bucket: !Sub aws-jam-challenge-resources-${AWS::Region}
        S3Key: launchdarkly-lambda-dynamo/layer.zip
      Description: This layer contains the Node SDK and DynamoDB add on
      LayerName: ld-dependencies
  GetFlagsStarter:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        S3Bucket: !Sub aws-jam-challenge-resources-${AWS::Region}
        S3Key: launchdarkly-lambda-dynamo/getFlagsStarter.zip
      Description: Function to retrieve the API based upon a flag
      Environment: 
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTable
          LAUNCHDARKLY_SDK_KEY: "YOUR_SDK_KEY"
      FunctionName: getFlagsStarter
      Layers: 
        - !Ref LambdaResourcesLayer
      PackageType: Zip
      Handler: index.handler
      Role: !GetAtt "LambdaToDynamoRole.Arn"
      Runtime: nodejs16.x
      Timeout: 10
  SyncFlagsToDynamo:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        S3Bucket: !Sub aws-jam-challenge-resources-${AWS::Region}
        S3Key: launchdarkly-lambda-dynamo/syncFlagsToDynamo.zip
      Description: Synchronize flag data from LaunchDarkly to DynamoDB
      Environment: 
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTable
          LAUNCHDARKLY_SDK_KEY: "YOUR_SDK_KEY"
      FunctionName: syncFlagsToDynamo
      Layers: 
        - !Ref LambdaResourcesLayer
      PackageType: Zip
      Handler: index.handler
      Role: !GetAtt "LambdaToDynamoRole.Arn"
      Runtime: nodejs16.x
      Timeout: 10
  SyncFlagsFunctionURL:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: NONE
      Cors: 
        AllowOrigins:
          - "*"
        AllowCredentials: false
      TargetFunctionArn: !GetAtt "SyncFlagsToDynamo.Arn"
  FunctionURLPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:invokeFunctionUrl
      FunctionName: !Ref SyncFlagsToDynamo
      FunctionUrlAuthType: NONE
      Principal: "*"
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: namespace
          AttributeType: S
        - AttributeName: key
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: namespace
          KeyType: HASH
        - AttributeName: key
          KeyType: RANGE
      PointInTimeRecoverySpecification: 
        PointInTimeRecoveryEnabled: true
  LambdaToDynamoRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
  LambdaToDynamoPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "LambdaToDynamoPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: !GetAtt "DynamoDBTable.Arn"
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
          - Effect: Allow
            Action: 
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action: "logs:CreateLogGroup"
            Resource: "*"
      Roles:
        - Ref: "LambdaToDynamoRole"
Outputs:
  TableName:
    Description: "DynamoDB table."
    Value: !Ref DynamoDBTable
